input {
  file {
    type => "logs"
    path => "/var/log/ovs/*"
    exclude => "*.gz"
    sincedb_path => "/var/run/.sincedb"
    tags => [ "framework" ]
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
  }
  file {
    type => "logs"
    path => "/var/log/ovs/volumedriver/*"
    exclude => [ "*.gz", "foc_*" ]
    sincedb_path => "/var/run/.sincedb"
    tags => [ "volumedriver" ]
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
  }
  file {
    type => "logs"
    path => "/var/log/ovs/volumedriver/foc_*"
    exclude => [ "*.gz" ]
    sincedb_path => "/var/run/.sincedb"
    tags => [ "failovercache" ]
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
  }
  file {
    type => "logs"
    path => "/var/log/arakoon/*/*"
    exclude => [ "*.gz" ]
    sincedb_path => "/var/run/.sincedb"
    tags => [ "arakoon" ]
  }
  file {
    type => "logs"
    path => [ "/var/log/syslog", "/var/log/dmesg", "/var/log/kern.log", "/var/log/auth.log" ]
    sincedb_path => "/var/run/.sincedb"
    tags => [ "system" ]
  }
}
filter {
  if "framework" in [tags] {
    grok {
      match => [ "message", "(?m)^%{TIMESTAMP_ISO8601:timestamp} - \[%{LOGLEVEL:level}\] - \[%{DATA:source}\] - \[%{DATA:logger}\] - %{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
    }
    mutate {
      gsub => [ "logger", "\.", " " ]
      remove_field => [ "timestamp" ]
    }
  }
  if "volumedriver" in [tags] {
    grok {
      match => [ "message", "(?m)^%{TIMESTAMP_ISO8601:timestamp} %{DATA:timezone} -- %{LOGLEVEL:level} -- %{DATA:source} -- %{DATA:message} -- \[%{DATA:thread}\]" ]
      overwrite => [ "message" ]
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss:SSSSSS" ]
    }
    mutate {
      remove_field => [ "timestamp" ]
    }
    if "debug" in [level] or "info" in [level] {
      drop { }
    }
  }
  if "failovercache" in [tags] {
    grok {
      match => [ "message", "(?m)^%{TIMESTAMP_ISO8601:timestamp} %{DATA:timezone} -- %{LOGLEVEL:level} -- %{DATA:source} -- %{DATA:message} -- \[%{DATA:thread}\]" ]
      overwrite => [ "message" ]
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss:SSSSSS" ]
    }
    mutate {
      remove_field => [ "timestamp" ]
    }
    if "debug" in [level] or "info" in [level] {
      drop { }
    }
  }
  if "arakoon" in [tags] {
    grok {
      match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGPROG}\: \(%{DATA:logger}\|%{DATA:level}\)\: %{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    mutate {
      remove_field => [ "timestamp" ]
    }
    if "info" in [level] {
      drop { }
    }
  }
  if "system" in [tags] {
    grok {
      match => [ "message", "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST} %{SYSLOGPROG}: %{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    mutate {
      remove_field => [ "timestamp" ]
    }
  }
}
output {
  elasticsearch {
    cluster => "<CLUSTER_NAME>"
    protocol => "http"
  }
}
